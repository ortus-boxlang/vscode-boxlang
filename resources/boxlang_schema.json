{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "boxlang",
    "additionalProperties": true,
    "description": "BoxLang configuration file schema",
    "properties": {
        "debugMode": {
            "description": "This puts the entire runtime in debug mode, which will produce lots of debug output and metrics",
            "type": "boolean"
        },
        "classGenerationDirectory": {
            "type": "string",
            "description": "Where all generated classes will be placed",
            "default": "${boxlang-home}/classes"
        },
        "validClassExtensions": {
            "type": "array",
            "description": "Extensions BoxLang will process as classes",
            "default": [ "bx", "cfc" ]
        },
        "validTemplateExtensions": {
            "type": "array",
            "description": "Extensions BoxLang will process as templates.",
            "default": [
                "bxs",
                "bxm",
                "bxml",
                "cfm",
                "cfml",
                "cfs"
            ]
        },
        "timezone": {
            "description": "The default timezone for the runtime; defaults to the JVM timezone if empty. Please use the IANA timezone database values",
            "type": "string"
        },
        "locale": {
            "description": "The default locale for the runtime; defaults to the JVM locale if empty. Please use the IETF BCP 47 language tag values",
            "type": "string"
        },
        "whitespaceCompressionEnabled": {
            "type": "boolean",
            "description": "Enable whitespace compression in output.  Only in use by the web runtimes currently.",
            "default": true
        },
        "useHighPrecisionMath": {
            "type": "boolean",
            "description": "By default BoxLang uses high-precision mathematics via BigDecimal operations",
            "default": true
        },
        "invokeImplicitAccessor": {
            "type": "boolean",
            "description": "If true, you can call implicit accessors/mutators on object properties. By default it is enabled",
            "default": true
        },
        "applicationTimeout": {
            "type": "string",
            "description": "Use Timespan syntax: \"days, hours, minutes, seconds\"",
            "default": "0,0,0,0"
        },
        "requestTimeout": {
            "description": "The request timeout for a request in milliseconds; 0 means no timeout.",
            "type": "string",
            "default": "0,0,0,0"
        },
        "sessionTimeout": {
            "description": "The request timeout for a session in milliseconds; 0 means no timeout.",
            "type": "string",
            "default": "0,0,30,0"
        },
        "sessionStorage": {
            "type": "string",
            "description": "Where sessions will be stored by default.  This has to be a name of a registered cache or the keyword \"memory\" to indicate our auto-created cache.",
            "default": "memory"
        },
        "mappings": {
            "description": "A collection of BoxLang mappings, the key is the prefix and the value is the directory.",
            "type": "object",
            "default": {
                "/": "${user-dir}"
            }
        },
        "modulesDirectory": {
            "description": "A collection of BoxLang module directories, they must be absolute paths.",
            "type": "array",
            "default": [
                "${boxlang-home}/modules"
            ]
        },
        "customTagsDirectory": {
            "description": "A collection of BoxLang custom tag directories, they must be absolute paths.",
            "type": "array",
            "default": [
                "${boxlang-home}/customTags"
            ]
        },
        "javaLibraryPaths": {
            "description": "A collection of directories we will class load all Java *.jar files from",
            "type": "array",
            "default": [
                "${boxlang-home}/lib"
            ]
        },
        "logging": {
            "description": "The runtime settings",
            "type": "object",
            "properties": {
                "logsDirectory": {
                    "description": "The location of the log files the runtime will produce",
                    "type": "string",
                    "default": [
                        "${boxlang-home}/logs"
                    ]
                },
                "maxLogDays": {
                    "type": "number",
                    "description": "The maximum number of days to keep log files before rotation. Default is 90 days or 3 months. Set to 0 to never rotate.",
                    "default": 90
                },
                "maxFileSize": {
                    "type": "string",
                    "description": "The maximum file size for a single log file before rotation. You can use the following suffixes: KB, MB, GB. Default is 100MB",
                    "default": "100MB"
                },
                "totalCapSize": {
                    "type": "string",
                    "description": "The total cap size of all log files before rotation. You can use the following suffixes: KB, MB, GB.",
                    "default": "5GB"
                },
                "rootLevel": {
                    "type": "string",
                    "description": "The root logger level. Valid values are in order of severity: ERROR, WARN, INFO, DEBUG, TRACE, OFF. If the runtime is in Debug mode, this will be set to DEBUG",
                    "default": "WARN",
                    "enum": [ "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "OFF" ]
                },
                "defaultEncoder": {
                    "type": "string",
                    "description": "Default Encoder for file appenders.",
                    "default": "text",
                    "enum": [ "text", "json" ]
                },
                "loggers": {
                    "description": "A collection of pre-defined loggers and their configurations",
                    "type": "object",
                    "patternProperties": {
                        ".*": {
                            "type": "object",
                            "properties": {
                                "rootLevel": {
                                    "type": "string",
                                    "description": "Leave out if it should inherit from the root logger",
                                    "default": "WARN",
                                    "enum": [ "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "OFF" ]
                                },
                                "appender": {
                                    "type": "string",
                                    "description": "Please note that we only use Rolling File Appenders",
                                    "default": "file",
                                    "enum": [ "file", "console" ]
                                },
                                "appenderArguments": {
                                    "type": "object",
                                    "description": "Use the defaults from the runtime"
                                },
                                "encoder": {
                                    "type": "string",
                                    "description": "Default Encoder for file appenders.",
                                    "default": "text",
                                    "enum": [ "text", "json" ]
                                },
                                "additive": {
                                    "type": "boolean",
                                    "description": "True means that this logger will inherit the appenders from the root logger. If false, it will only use the appenders defined in this logger.",
                                    "default": true
                                }
                            }
                        }
                    },
                    "default": {
                        "runtime": {
                            "appender": "file",
                            "appenderArguments": { },
                            "encoder": "text",
                            "additive": true
                        },
                        "modules": {
                            "appender": "file",
                            "appenderArguments": { },
                            "encoder": "text",
                            "additive": true
                        },
                        "application": {
                            "level": "TRACE",
                            "appender": "file",
                            "appenderArguments": { },
                            "encoder": "text",
                            "additive": true
                        },
                        "scheduler": {
                            "level": "INFO",
                            "appender": "file",
                            "appenderArguments": { },
                            "encoder": "text",
                            "additive": true
                        }
                    }
                }
            }
        },
        "experimental": {
            "type": "object",
            "description": "This is the experimental features flags.",
            "patternProperties": {
                "compiler": {
                    "type": "string",
                    "description": "This choose the compiler to use for the runtime",
                    "default": "asm",
                    "enum": [ "java", "asm", "noop" ]
                },
                "ASTCapture": {
                    "type": "boolean",
                    "description": "If enabled, it will generate AST JSON data under the project's /grapher/data folder",
                    "default": false
                },
                ".*": { }
            }
        },
        "executors": {
            "type": "object",
            "description": "Global Executors for the runtime. These are managed by the AsyncService and registered upon startup. The name of the executor is the key and the value is a struct of executor settings",
            "patternProperties": {
                ".*": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [ "cached", "fixed", "fork_join", "scheduled", "single", "virtual", "work-stealing" ],
                            "default": "scheduled"
                        },
                        "threads": {
                            "type": "integer",
                            "default": 20,
                            "description": "Number of threads to use in the executor. Some executors do not take in a `threads` property."
                        }
                    }
                }
            }
        },
        "defaultDatasource": {
            "type": "string"
        },
        "datasources": {
            "type": "object",
            "description": "Global datasources",
            "patternProperties": {
                ".*": {
                    "type": "object",
                    "description": "Datasource configuration",
                    "properties": {
                        "driver": {
                            "type": "string"
                        },
                        "host": {
                            "type": "string"
                        },
                        "port": {
                            "type": "integer"
                        },
                        "connectionString": {
                            "type": "string"
                        },
                        "database": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "defaultRemoteMethodReturnFormat": {
            "type": "string",
            "default": "json",
            "description": "The default return format for class invocations via web runtimes"
        },
        "defaultCache": {
            "type": "object",
            "description": "The configuration for the BoxLang `default` cache.  If empty, we use the defaults. See the ortus.boxlang.runtime.config.segments.CacheConfig for all the available settings. This is used by query caching, template caching, and other internal caching. You can use the cache() BIF in order to get access to the default cache.",
            "properties": {
                "evictCount": {
                    "type": "integer",
                    "description": "How many to evict at a time once a policy is triggered",
                    "default": 1
                },
                "evictionPolicy": {
                    "type": "string",
                    "description": "The eviction policy to use: Least Recently Used",
                    "default": "LRU",
                    "enum": [ "LRU", "LFU", "FIFO", "LIFO", "RANDOM" ]
                },
                "freeMemoryPercentageThreshold": {
                    "type": "integer",
                    "description": "The free memory percentage threshold to trigger eviction. 0 = disabled, 1-100 = percentage of available free memory in heap. If the threadhold is reached, the eviction policy is triggered.",
                    "default": 0
                },
                "maxObjects": {
                    "type": "integer",
                    "description": "The maximum number of objects to store in the cache.",
                    "default": 1000
                },
                "defaultLastAccessTimeout": {
                    "type": "integer",
                    "description": "The maximum in seconds to keep an object in the cache since it's last access. So if an object is not accessed in this time or greater, it will be removed from the cache",
                    "default": 1800
                },
                "defaultTimeout": {
                    "type": "integer",
                    "description": "he maximum time in seconds to keep an object in the cache regardless if it's used or not. A default timeout of 0 = never expire, careful with this setting.",
                    "default": 3600
                },
                "objectStore": {
                    "type": "string",
                    "description": "The object store to use to store the objects. The default is a ConcurrentStore which is a memory sensitive store.",
                    "default": "ConcurrentStore"
                },
                "reapFrequency": {
                    "type": "integer",
                    "description": "The frequency in seconds to check for expired objects and expire them using the policy. This creates a BoxLang task that runs every X seconds to check for expired objects.",
                    "default": 120
                },
                "resetTimeoutOnAccess": {
                    "type": "boolean",
                    "description": "If enabled, the last access timeout will be reset on every access. This means that the last access timeout will be reset to the defaultLastAccessTimeout on every access. Usually for session caches or to simulate a session",
                    "default": false
                },
                "useLastAccessTimeouts": {
                    "type": "boolean",
                    "description": "If enabled, the last access timeout will be used to evict objects from the cache.",
                    "default": true
                }
            },
            "default": {
                "evictCount": 1,
                "evictionPolicy": "LRU",
                "freeMemoryPercentageThreshold": 0,
                "maxObjects": 1000,
                "defaultLastAccessTimeout": 1800,
                "defaultTimeout": 3600,
                "objectStore": "ConcurrentStore",
                "reapFrequency": 120,
                "resetTimeoutOnAccess": false,
                "useLastAccessTimeouts": true
            }
        },
        "modules": {
            "type": "object",
            "description": "Settings for individual BoxLang modules",
            "patternProperties": {
                ".*": {
                    "type": "object",
                    "properties": {
                        "disabled": {
                            "type": "boolean",
                            "description": "Prevents the module from being loaded by the BoxLang runtime."
                        },
                        "settings": {
                            "type": "object",
                            "description": "Module specific settings."
                        }
                    }
                }
            }
        },
        "caches": {
            "type": "object",
            "description": "Register any named caches here. The key is the name of the cache and the value is the cache configuration. A `provder` property is required and the value is the name of the cache provider or the fully qualified class name. The `properties` property is optional and is a struct of properties that are specific to the cache provider.",
            "patternProperties": {
                ".*": {
                    "type": "object",
                    "required": [
                        "provider"
                    ],
                    "properties": {
                        "provider": {
                            "type": "string",
                            "description": "The name of the cache provider or the fully qualified class name",
                            "default": "BoxCacheProvider"
                        },
                        "properties": {
                            "evictCount": {
                                "type": "integer",
                                "description": "How many to evict at a time once a policy is triggered",
                                "default": 1
                            },
                            "evictionPolicy": {
                                "type": "string",
                                "description": "The eviction policy to use: Least Recently Used",
                                "default": "LRU",
                                "enum": [ "LRU", "LFU", "FIFO", "LIFO", "RANDOM" ]
                            },
                            "freeMemoryPercentageThreshold": {
                                "type": "integer",
                                "description": "The free memory percentage threshold to trigger eviction. 0 = disabled, 1-100 = percentage of available free memory in heap. If the threadhold is reached, the eviction policy is triggered.",
                                "default": 0
                            },
                            "maxObjects": {
                                "type": "integer",
                                "description": "The maximum number of objects to store in the cache.",
                                "default": 1000
                            },
                            "defaultLastAccessTimeout": {
                                "type": "integer",
                                "description": "The maximum in seconds to keep an object in the cache since it's last access. So if an object is not accessed in this time or greater, it will be removed from the cache",
                                "default": 1800
                            },
                            "defaultTimeout": {
                                "type": "integer",
                                "description": "he maximum time in seconds to keep an object in the cache regardless if it's used or not. A default timeout of 0 = never expire, careful with this setting.",
                                "default": 3600
                            },
                            "objectStore": {
                                "type": "string",
                                "description": "The object store to use to store the objects. The default is a ConcurrentStore which is a memory sensitive store.",
                                "default": "ConcurrentStore"
                            },
                            "reapFrequency": {
                                "type": "integer",
                                "description": "The frequency in seconds to check for expired objects and expire them using the policy. This creates a BoxLang task that runs every X seconds to check for expired objects.",
                                "default": 120
                            },
                            "resetTimeoutOnAccess": {
                                "type": "boolean",
                                "description": "If enabled, the last access timeout will be reset on every access. This means that the last access timeout will be reset to the defaultLastAccessTimeout on every access. Usually for session caches or to simulate a session",
                                "default": false
                            },
                            "useLastAccessTimeouts": {
                                "type": "boolean",
                                "description": "If enabled, the last access timeout will be used to evict objects from the cache.",
                                "default": true
                            }
                        }
                    }
                }
            }
        },
        "security": {
            "type": "object",
            "description": "These are the security settings for the runtime.",
            "properties": {
                "disallowedImports": {
                    "type": "array",
                    "description": "All regex patterns are case-insensitive, A list of regex patterns that will match class paths, and if matched, execution will be disallowed. This applies to import statements, createObject, new, and class creation. Ex: \"disallowedImports\": [\"java\\.lang\\.(ProcessBuilder|Reflect\", \"java\\.io\\.(File|FileWriter)\"]",
                    "default": [ ]
                },
                "disallowedBifs": {
                    "type": "array",
                    "description": "A list of BIF names that will be disallowed from execution. Ex: \"disallowedBifs\": [\"createObject\", \"systemExecute\"]",
                    "default": [ ]
                },
                "disallowedComponents": {
                    "type": "array",
                    "description": "A list of Component names that will be disallowed from execution. Ex: \"disallowedComponents\": [ \"execute\", \"http\" ]",
                    "default": [ ]
                },
                "allowedFileOperationExtensions": {
                    "type": "array",
                    "description": "An explicit whitelist of file extensions that are allowed to be uploaded - overrides any values in the disallowedWriteExtensions",
                    "default": [ ]
                },
                "disallowedFileOperationExtensions": {
                    "type": "array",
                    "description": "The list of file extensions that are not allowed to be uploaded. Also enforced by file relocation operations ( e.g. copy/move )",
                    "default": [
                        "bat",
                        "exe",
                        "cmd",
                        "cfm",
                        "cfc",
                        "cfs",
                        "bx",
                        "bxm",
                        "bxs",
                        "sh",
                        "php",
                        "pl",
                        "cgi",
                        "386",
                        "dll",
                        "com",
                        "torrent",
                        "js",
                        "app",
                        "jar",
                        "pif",
                        "vb",
                        "vbscript",
                        "wsf",
                        "asp",
                        "cer",
                        "csr",
                        "jsp",
                        "drv",
                        "sys",
                        "ade",
                        "adp",
                        "bas",
                        "chm",
                        "cpl",
                        "crt",
                        "csh",
                        "fxp",
                        "hlp",
                        "hta",
                        "inf",
                        "ins",
                        "isp",
                        "jse",
                        "htaccess",
                        "htpasswd",
                        "ksh",
                        "lnk",
                        "mdb",
                        "mde",
                        "mdt",
                        "mdw",
                        "msc",
                        "msi",
                        "msp",
                        "mst",
                        "ops",
                        "pcd",
                        "prg",
                        "reg",
                        "scr",
                        "sct",
                        "shb",
                        "shs",
                        "url",
                        "vbe",
                        "vbs",
                        "wsc",
                        "wsf",
                        "wsh"
                    ]
                }
            }
        }
    }
}