{
    "name": "boxlang",
    "scopeName": "source.boxlang",
    "patterns": [
        {
            "name": "boxscript",
            "include": "#expression"
        }
    ],
    "repository": {
        "expression": {
            "name": "meta.expression",
            "patterns": [
                { "include": "#operatorConcat" },
                { "include": "#operatorPlus" },
                { "include": "#operatorTimes" },
                { "include": "#operatorMinus" },
                { "include": "#operatorLessThan" },
                { "include": "#operatorGreaterThan" },
                { "include": "#operatorLogicalNot" },
                { "include": "#operatorPower" },
                { "include": "#literalStringDouble" },
                { "include": "#literalNumber" },
                { "include": "#literalBoolean" },
                { "include": "#literalNull" }
            ]
        },
        "literalNull": {
            "name": "constant.null",
            "match": "null"
        },
        "literalNumber": {
            "name": "constant.numeric",
            "match": "\\d+.\\d+|\\d"
        },
        "literalBoolean": {
            "name": "constant.boolean",
            "match": "true|false"
        },
        "operatorConcat": {
            "name": "keyword.operator.concat",
            "match": "&"
        },
        "operatorPlus": {
            "name": "keyword.operator.plus",
            "match": "\\+"
        },
        "operatorTimes": {
            "name": "keyword.operator.times",
            "match": "\\*"
        },
        "operatorMinus": {
            "name": "keyword.operator.minus",
            "match": "-"
        },
        "operatorLessThan": {
            "name": "keyword.operator.lessthan",
            "match": "<"
        },
        "operatorGreaterThan": {
            "name": "keyword.operator.greaterthan",
            "match": ">"
        },
        "operatorLogicalNot": {
            "name": "keyword.operator.logicalnot",
            "match": "!"
        },
        "operatorPower": {
            "name": "keyword.operator.power",
            "match": "\\^"
        },
        "literalStringInterpolation": {
            "name": "string.interpolation",
            "begin": "(#)(?!#)",
            "end": "#",
            "beginCaptures": {
                "1": { "name": "keyword.operator.hash.begin" }
            },
            "endCaptures": {
                "0": { "name": "keyword.operator.hash.end" }
            },
            "patterns": [
                { "include": "#expression" }
            ]
        },
        "literalStringDouble": {
            "name": "string.quoted.double",
            "begin": "\"",
            "end": "(\")(?!\")",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin.boxlang" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end.boxlang" }
            },
            "patterns": [
                { "match": "\"\"" },
                { "include": "#literalStringInterpolation" }
            ]
        }
    }
}