{
    "name": "boxlang",
    "scopeName": "source.boxlang",
    "patterns": [
        {
            "include": "#statement"
        },
        {
            "name": "boxscript",
            "include": "#expression"
        }
    ],
    "repository": {
        "expression": {
            "name": "meta.expression",
            "patterns": [
                { "include": "#scriptKeyword" },
                { "include": "#newExpression" },
                { "include": "#functionInvocation" },
                { "include": "#function" },
                { "include": "#punctuationColon" },
                { "include": "#punctuationParens" },
                { "include": "#operatorConcat" },
                { "include": "#operatorPlus" },
                { "include": "#operatorTimes" },
                { "include": "#operatorMinus" },
                { "include": "#operatorLessThan" },
                { "include": "#operatorGreaterThan" },
                { "include": "#operatorLogicalNot" },
                { "include": "#operatorPower" },
                { "include": "#literalStringDouble" },
                { "include": "#literalStringSingle" },
                { "include": "#literalNumber" },
                { "include": "#literalBoolean" },
                { "include": "#literalNull" },
                { "include": "#identifier" },
                { "include": "#literalStruct" }
            ]
        },
        "function": {
            "name": "meta.udf.boxlang",
            "begin": "(?i)(?=\\w*\\s*\\w*\\s*function\\s*\\w+\\()",
            "end": "\\}",
            "patterns": [
                { "include": "#storage-modifier" },
                {
                    "name": "meta.function.declaration.boxlang",
                    "begin": "(?i)(function)\\s+([a-z][a-z0-9]*)(\\()",
                    "beginCaptures": {
                        "1": { "name": "storage.type.function.boxlang" },
                        "2": { "name": "entity.name.function.boxlang" },
                        "3": { "name": "punctuation.definition.parenthesis.begin.boxlang" }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.parenthesis.end.boxlang" }
                    },
                    "patterns": [
                        { "include": "#comma" },
                        { "include": "#functionArgument" }
                    ]
                },
                { "include": "#storage-return-type" },
                {
                    "name": "meta.udf.body.boxlang",
                    "begin": "\\{",
                    "beginCaptures": {
                        "0": "punctuation.definition.block.begin.boxlang"
                    },
                    "end": "(?=\\})",
                    "endCaptures": {
                        "0": "punctuation.definition.block.end.boxlang"
                    },
                    "patterns": [
                        { "include": "#expression" }
                    ]
                }
            ]
        },
        "functionInvocation": {
            "name": "meta.function-invocation.boxlang",
            "begin": "(?i)([a-z][a-z0-9]*)\\(",
            "beginCaptures": {
                "1": { "name": "support.function.boxlang" }
            },
            "end": "\\)",
            "patterns": [
                { "include": "#expression" }
            ]
        },
        "methodInvocation": {
            "name": "meta.function-invocation.boxlang",
            "begin": "(?i)([a-z][a-z0-9]*)\\(",
            "beginCaptures": {
                "1": { "name": "support.function.boxlang" }
            },
            "end": "\\)",
            "patterns": [
                { "include": "#expression" }
            ]
        },
        "comma": {
            "name": "punctuation.comma",
            "match": ","
        },
        "storage-return-type": {
            "name": "storage.type.boxlang",
            "match": "(?i)[a-z][a-z0-9]*"
        },
        "storage-modifier": {
            "name": "storage.modifier.boxlang",
            "match": "public"
        },
        "punctuationParens": {
            "name": "punctuation.definition.parenthesis.boxlang",
            "match": "\\(|\\)"
        },
        "punctuationColon": {
            "name": "punctuation.separator.colon.boxlang",
            "match": ":"
        },
        "identifier": {
            "name": "variable.other.readwrite.boxlang",
            "match": "(?i)[a-z][\\d\\w]+"
        },
        "literalNull": {
            "name": "constant.null",
            "match": "null"
        },
        "literalNumber": {
            "name": "constant.numeric",
            "match": "\\d+.\\d+|\\d"
        },
        "literalBoolean": {
            "name": "constant.boolean",
            "match": "true|false"
        },
        "operatorConcat": {
            "name": "keyword.operator.concat",
            "match": "&"
        },
        "operatorPlus": {
            "name": "keyword.operator.plus",
            "match": "\\+"
        },
        "operatorTimes": {
            "name": "keyword.operator.times",
            "match": "\\*"
        },
        "operatorMinus": {
            "name": "keyword.operator.minus",
            "match": "-"
        },
        "operatorLessThan": {
            "name": "keyword.operator.lessthan",
            "match": "<"
        },
        "operatorGreaterThan": {
            "name": "keyword.operator.greaterthan",
            "match": ">"
        },
        "operatorLogicalNot": {
            "name": "keyword.operator.logicalnot",
            "match": "!"
        },
        "operatorPower": {
            "name": "keyword.operator.power",
            "match": "\\^"
        },
        "literalStruct": {
            "name": "meta.expression.struct",
            "begin": "\\{",
            "end": "\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.block.begin.boxlang" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.definition.block.end.boxlang" }
            },
            "patterns": [
                { "include": "#expression" }
            ]
        },
        "literalStringInterpolation": {
            "name": "string.interpolation",
            "begin": "(#)(?!#)",
            "end": "#",
            "beginCaptures": {
                "1": { "name": "keyword.operator.hash.begin" }
            },
            "endCaptures": {
                "0": { "name": "keyword.operator.hash.end" }
            },
            "patterns": [
                { "include": "#expression" }
            ]
        },
        "literalStringDouble": {
            "name": "string.quoted.double",
            "begin": "\"",
            "end": "(\")(?!\")",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin.boxlang" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end.boxlang" }
            },
            "patterns": [
                { "match": "\"\"" },
                { "include": "#literalStringInterpolation" }
            ]
        },
        "literalStringSingle": {
            "name": "string.quoted.single",
            "begin": "'",
            "end": "(')(?!')",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin.boxlang" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end.boxlang" }
            },
            "patterns": [
                { "match": "''" },
                { "include": "#literalStringInterpolation" }
            ]
        },
        "newExpression": {
            "name": "meta.instance.constructor.boxlang",
            "begin": "(?i)(new)( *)?([a-z][a-z0-9*)( *)?\\(",
            "beginCaptures": {
                "1": { "name": "support.operator.new.boxlang" },
                "2": { "name": "entity.name.class.boxlang" }
            },
            "end": "\\)",
            "patterns": [
                { "include": "#expression" }
            ]
        },
        "scriptKeyword": {
            "name": "keyword.control",
            "match": "return|new"
        },
        "scriptBIFNames": {
            "name": "support.function.boxlang",
            "match": "(?i)randRange|len"
        },
        "functionArgument": {
            "name": "meta.udf.arg",
            "begin": "( *)?(required)?( *)?(([a-z][a-z0-9]+)( +))?([a-z][a-z0-9]*)( *=)?",
            "beginCaptures": {
                "2": { "name": "keyword.other.required" },
                "4": { "name": "support.type" },
                "7": { "name": "variable.parameter.function" },
                "8": { "name": "keyword.operator.assignment" }
            },
            "end": "(?=\\)|,)",
            "patterns": [
                { "include": "#expression" }
            ]
        }
    }
}